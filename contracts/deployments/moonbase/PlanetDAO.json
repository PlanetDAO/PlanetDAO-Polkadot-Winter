{
  "address": "0xe89b0aFbe5C98980e3E48C9e4dc58f81b29DB523",
  "abi": [
    {
      "inputs": [],
      "name": "_dao_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_donations_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feed_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_feeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feed_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Type",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_goal_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_goal_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "goal_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "goal_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_vote_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_join_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_joined_person",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daoid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "joined_date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_read_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reply_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_smart_contract_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_smart_contracts_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "smart_contract_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "smart_contract_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_template_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_user_badges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dao",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "joined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "goal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "ideas",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "donation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "comment",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reply",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feed_text",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_type",
          "type": "string"
        }
      ],
      "name": "add_Feed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed2",
          "type": "string"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sender",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_read_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_replies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reply_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_template",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "feed_add",
          "type": "bool"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_goal_id",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_smart_contracts",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        }
      ],
      "name": "getMsgIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "name": "getReadMsg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        }
      ],
      "name": "getReplyIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_id",
          "type": "string"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dao_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        }
      ],
      "name": "get_person_joinedID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dao_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        }
      ],
      "name": "is_person_joined",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dao_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "joined_date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "join_community",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "join_id",
          "type": "uint256"
        }
      ],
      "name": "leave_community",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sender",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        }
      ],
      "name": "sendMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wallet",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "name": "sendReadMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reply",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userid",
          "type": "uint256"
        }
      ],
      "name": "sendReply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_template",
          "type": "string"
        }
      ],
      "name": "update_template",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7628907ccefd475902353523ab4fea253897f8d641972e12d9c386d6a5530805",
  "receipt": {
    "to": null,
    "from": "0x610Cd980BeF747451152e8F0fF16A19A451F7a43",
    "contractAddress": "0xe89b0aFbe5C98980e3E48C9e4dc58f81b29DB523",
    "transactionIndex": 0,
    "gasUsed": "7241676",
    "logsBloom": "0x
    "blockHash": "0x206c7e058909510faa8cb707e2ec71821c0fec1645c927cc4496f1cac5b7bd91",
    "transactionHash": "0x7628907ccefd475902353523ab4fea253897f8d641972e12d9c386d6a5530805",
    "logs": [],
    "blockNumber": 5875306,
    "cumulativeGasUsed": "7241676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8a7d226fe2796d7ba5dee3a6f19c021e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_dao_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_donations_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feed_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_feeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feed_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goal_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_goal_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"goal_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_vote_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_join_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_joined_person\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daoid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"joined_date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_read_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reply_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_smart_contract_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_smart_contracts_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"smart_contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"smart_contract_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_template_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_user_badges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dao\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"goal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ideas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"donation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"comment\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reply\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feed_text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"add_Feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed2\",\"type\":\"string\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_read_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_replies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reply_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"feed_add\",\"type\":\"bool\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_goal_id\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_smart_contracts\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"}],\"name\":\"getMsgIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"name\":\"getReadMsg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"}],\"name\":\"getReplyIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_id\",\"type\":\"string\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dao_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"}],\"name\":\"get_person_joinedID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dao_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"}],\"name\":\"is_person_joined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dao_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"joined_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"join_community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"join_id\",\"type\":\"uint256\"}],\"name\":\"leave_community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sender\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"}],\"name\":\"sendMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"name\":\"sendReadMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reply\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"}],\"name\":\"sendReply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"}],\"name\":\"update_template\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PlanetDAO.sol\":\"PlanetDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/PlanetDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\n\\r\\ncontract PlanetDAO {\\r\\n  struct dao_uri_struct {\\r\\n    string dao_wallet;\\r\\n    string dao_uri;\\r\\n    string finished;\\r\\n  }\\r\\n  struct goal_uri_struct {\\r\\n    string dao_id;\\r\\n    string goal_uri;\\r\\n  }\\r\\n\\r\\n  struct ideas_uri_struct {\\r\\n    string goal_id;\\r\\n    string ideas_uri;\\r\\n    uint256 donation;\\r\\n  }\\r\\n\\r\\n  struct donation_struct {\\r\\n    uint256 ideas_id;\\r\\n    uint256 userid;\\r\\n    uint256 donation;\\r\\n  }\\r\\n\\r\\n  struct smart_contract_uri_struct {\\r\\n    uint256 smart_contract_id;\\r\\n    uint256 ideas_id;\\r\\n    string smart_contract_uri;\\r\\n  }\\r\\n  struct goal_ideas_votes_struct {\\r\\n    uint256 goal_id;\\r\\n    uint256 ideas_id;\\r\\n    uint256 user_id;\\r\\n  }\\r\\n  struct message_struct {\\r\\n    uint256 message_id;\\r\\n    uint256 ideas_id;\\r\\n    string message;\\r\\n    string sender;\\r\\n  }\\r\\n  struct message_read_struct {\\r\\n    uint256 message_id;\\r\\n    uint256 ideas_id;\\r\\n    uint256 user_id;\\r\\n    string msg_type;\\r\\n  }\\r\\n  struct reply_struct {\\r\\n    uint256 reply_id;\\r\\n    uint256 message_id;\\r\\n    uint256 ideas_id;\\r\\n    string message;\\r\\n  }\\r\\n\\r\\n  struct UnbondingRequest {\\r\\n    int64 completionTime;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct join_struct {\\r\\n    uint256 daoid;\\r\\n    uint256 user_id;\\r\\n    string joined_date;\\r\\n  }\\r\\n\\r\\n  struct user_badge_struct {\\r\\n    uint256 user_id;\\r\\n    bool dao;\\r\\n    bool joined;\\r\\n    bool goal;\\r\\n    bool ideas;\\r\\n    bool vote;\\r\\n    bool donation;\\r\\n    bool comment;\\r\\n    bool reply;\\r\\n  }\\r\\n\\r\\n  struct feed_struct {\\r\\n    uint256 feed_id;\\r\\n    uint256 date;\\r\\n    string Type;\\r\\n    string data;\\r\\n  }\\r\\n  uint256 public _dao_ids;\\r\\n  uint256 public _donations_ids;\\r\\n  uint256 public _goal_ids;\\r\\n  uint256 public _ideas_ids;\\r\\n  uint256 public _join_ids;\\r\\n  uint256 public _smart_contract_ids;\\r\\n  uint256 public _ideas_vote_ids;\\r\\n  uint256 public _message_ids;\\r\\n  uint256 public _message_read_ids;\\r\\n  uint256 public _reply_ids;\\r\\n  uint256 public _feed_ids;\\r\\n  mapping(uint256 => dao_uri_struct) public _dao_uris; //_dao_ids              => (Dao)                    Dao Wallet + Dao URI   + Finished\\r\\n  mapping(uint256 => string) public _template_uris; //_dao_ids              => (Dao)                   Template HTML Code\\r\\n  mapping(uint256 => join_struct) public _joined_person; //_join_ids             => (Dao)                  join_struct\\r\\n\\r\\n  mapping(uint256 => goal_uri_struct) public _goal_uris; //_goal_ids             => (Goal)                   Dao ID + Goal URI\\r\\n  mapping(uint256 => ideas_uri_struct) public _ideas_uris; //_ideas_ids            => (Ideas)                  Goal ID + Ideas URI\\r\\n  mapping(uint256 => uint256) public _donated; //uint256            => (Donated to ideas)                amount\\r\\n  mapping(uint256 => feed_struct) public _feeds; //_feed_ids            => (feed_struct)\\r\\n  mapping(uint256 => donation_struct) public _donations; //uint256            => donation_struct\\r\\n  mapping(uint256 => smart_contract_uri_struct) public _smart_contracts_uris; //_smart_contract_ids   => (Ideas Smart contract)   Goal ID + Ideas URI\\r\\n  mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes; //_ideas_vote_ids       => (Vote)                   Goal ID + Ideas ID + User Id\\r\\n\\r\\n  mapping(uint256 => message_struct) public all_messages; // all_messages        => _message_ids + message_struct\\r\\n\\r\\n  mapping(uint256 => message_read_struct) public all_read_messages; // all_read_messages        => _message_read_ids + message_read_struct\\r\\n\\r\\n  mapping(uint256 => reply_struct) public all_replies; // all_messages        => _reply_ids + reply_struct\\r\\n  mapping(uint256 => user_badge_struct) public _user_badges; //user_id            => user_badge_struct\\r\\n\\r\\n  //Daos\\r\\n  function create_dao(string memory _dao_wallet, string memory _dao_uri, string memory _template, uint256 user_id) public returns (uint256) {\\r\\n    //Create Dao into _dao_uris\\r\\n    _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, 'False');\\r\\n    _template_uris[_dao_ids] = _template;\\r\\n    _user_badges[user_id].dao = true;\\r\\n    _dao_ids++;\\r\\n\\r\\n    return _dao_ids;\\r\\n  }\\r\\n\\r\\n  function update_template(uint256 _dao_id, string memory _template) public {\\r\\n    _template_uris[_dao_id] = _template;\\r\\n  }\\r\\n\\r\\n  function set_dao(uint256 _dao_id, string memory _dao_wallet, string memory _dao_uri) public {\\r\\n    //Set Dao of wallet and uri\\r\\n    _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n    _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n  }\\r\\n\\r\\n  function get_all_daos() public view returns (string[] memory) {\\r\\n    //Getting all doas\\r\\n    string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n    for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n      _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n    //Getting one dao URI\\r\\n    return _dao_uris[_dao_id].dao_uri;\\r\\n  }\\r\\n\\r\\n  function add_Feed(string memory feed_text, string memory _type) public {\\r\\n    _feeds[_feed_ids] = feed_struct(_feed_ids, block.timestamp, _type, feed_text);\\r\\n    _feed_ids++;\\r\\n  }\\r\\n\\r\\n  //Goals\\r\\n  function create_goal(string memory _goal_uri, string memory _dao_id, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n    //Create goal into _goal_uris\\r\\n    _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n\\r\\n    _user_badges[_user_id].goal = true;\\r\\n    _goal_ids++;\\r\\n    add_Feed(_feed, 'goal');\\r\\n\\r\\n    return _goal_ids;\\r\\n  }\\r\\n\\r\\n  function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n    //Set goal uri\\r\\n    _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n  }\\r\\n\\r\\n  function get_all_goals() public view returns (string[] memory) {\\r\\n    //Getting all goals\\r\\n    string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n      _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_all_goals_by_dao_id(string memory _dao_id) public view returns (string[] memory) {\\r\\n    //Getting all goals by dao id\\r\\n    string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n    uint256 _store_id;\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n      if (keccak256(bytes(_goal_uris[i].dao_id)) == keccak256(bytes(_dao_id))) {\\r\\n        _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n        _store_id++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\r\\n    //Getting goal id by uri\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n      if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return i;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n  \\r\\n  // function get_dao_id_by_ideas_id(uint256 ideas_id) public view returns (string memory) {\\r\\n    \\r\\n  //   string memory  goal_id= _ideas_uris[ideas_id].goal_id;\\r\\n  //   string memory dao_id = _goal_uris[goal_id].dao_id;\\r\\n    \\r\\n  //   return dao_id;\\r\\n  // }\\r\\n\\r\\n  function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n    //Getting one goal URI\\r\\n    return _goal_uris[_goal_id].goal_uri;\\r\\n  }\\r\\n\\r\\n  //Ideas\\r\\n  function create_ideas(string memory _ideas_uri, string memory _goal_id, string[] memory _smart_contracts, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n    //Create ideas into _ideas_uris\\r\\n    _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri, 0);\\r\\n    _user_badges[_user_id].ideas = true;\\r\\n    _ideas_ids++;\\r\\n\\r\\n    for (uint256 i = 0; i < _smart_contracts.length; i++) {\\r\\n      create_ideas_smart_contract(_ideas_ids, _smart_contract_ids, _smart_contracts[i]);\\r\\n      _smart_contract_ids++;\\r\\n    }\\r\\n    add_Feed(_feed, 'idea');\\r\\n\\r\\n    return _ideas_ids;\\r\\n  }\\r\\n\\r\\n  function create_ideas_smart_contract(uint256 _ideas_id, uint256 _smart_contract_id, string memory _smart_contract) private {\\r\\n    _smart_contracts_uris[_smart_contract_id] = smart_contract_uri_struct(_ideas_id, _smart_contract_id, _smart_contract);\\r\\n  }\\r\\n\\r\\n  function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n    _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n  }\\r\\n\\r\\n  function add_donation(uint256 _ideas_id, uint256 _doantion, uint256 _userid, string memory _feed1, string memory _feed2) public {\\r\\n    if (_user_badges[_userid].donation == false) {\\r\\n      add_Feed(_feed1, 'badge');\\r\\n    }\\r\\n    add_Feed(_feed2, 'donation');\\r\\n\\r\\n    _user_badges[_userid].donation = true;\\r\\n    _ideas_uris[_ideas_id].donation += _doantion;\\r\\n    _donated[_userid] += _doantion;\\r\\n    _donations[_donations_ids] = donation_struct(_ideas_id, _userid, _doantion);\\r\\n    _donations_ids++;\\r\\n  }\\r\\n\\r\\n  function join_community(uint256 dao_id, uint256 person,string memory joined_date, string memory _feed) public {\\r\\n    _user_badges[person].joined = true;\\r\\n    _joined_person[_join_ids] = join_struct({daoid: dao_id, user_id: person,joined_date:joined_date});\\r\\n    _join_ids++;\\r\\n    add_Feed(_feed, 'join');\\r\\n  }\\r\\n\\r\\n  function leave_community(uint256 join_id) public {\\r\\n    _joined_person[join_id] = join_struct({daoid: 9999, user_id: 9999,joined_date:\\\"\\\"});\\r\\n  }\\r\\n\\r\\n  function is_person_joined(uint256 dao_id, uint256 person) public view returns (bool) {\\r\\n    for (uint256 i = 0; i < _join_ids; i++) {\\r\\n      if ((_joined_person[i].user_id == person) && (_joined_person[i].daoid == dao_id)) return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function get_person_joinedID(uint256 dao_id, uint256 person) public view returns (uint256) {\\r\\n    for (uint256 i = 0; i < _join_ids; i++) {\\r\\n      if ((_joined_person[i].user_id == person) && (_joined_person[i].daoid == dao_id)) return i;\\r\\n    }\\r\\n\\r\\n    return 9999;\\r\\n  }\\r\\n\\r\\n  function get_all_ideas() public view returns (string[] memory) {\\r\\n    //Getting all ideas\\r\\n    string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_all_ideas_by_goal_id(string memory  _goal_id) public view returns (string[] memory) {\\r\\n    //Getting all ideas by goal id\\r\\n    string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n    uint256 _store_id;\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      if (keccak256(bytes(_ideas_uris[i].goal_id)) == keccak256(bytes(_goal_id))) _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n      _store_id++;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n    //Getting ideas id by uri\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return i;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (string memory) {\\r\\n    //Getting ideas id by uri\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return _ideas_uris[i].goal_id;\\r\\n    }\\r\\n\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n    //Getting one ideas URI\\r\\n    return _ideas_uris[_ideas_id].ideas_uri;\\r\\n  }\\r\\n\\r\\n  //Votes\\r\\n  function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id, uint256 _user_id, string memory _feed,bool  feed_add) public returns (uint256) {\\r\\n    _user_badges[_user_id].vote = true;\\r\\n    //Create votes into all_goal_ideas_votes\\r\\n    all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id, _user_id);\\r\\n    _ideas_vote_ids++;\\r\\n    if (feed_add){\\r\\n        add_Feed(_feed, 'vote');\\r\\n    }\\r\\n\\r\\n    return _ideas_vote_ids;\\r\\n  }\\r\\n\\r\\n  function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory) {\\r\\n    //gets all ideas votes from goal\\r\\n    string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\r\\n    uint256 _store_id;\\r\\n    for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\r\\n      if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id) _StoreInfo[_store_id] = Strings.toString(all_goal_ideas_votes[i].user_id);\\r\\n      _store_id++;\\r\\n    }\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  //Messages\\r\\n  function sendMsg(uint256 _ideas_id, string memory _message, string memory _sender, uint256 _user_id) public returns (uint256) {\\r\\n    _user_badges[_user_id].comment = true;\\r\\n    //Create messsage into all_messages\\r\\n    all_messages[_message_ids] = message_struct(_message_ids, _ideas_id, _message, _sender);\\r\\n    _message_ids++;\\r\\n\\r\\n    return _message_ids;\\r\\n  }\\r\\n\\r\\n  function getMsgIDs(uint256 ideas_id) public view returns (uint256[] memory) {\\r\\n    //Getting all messages ids by idea id\\r\\n    uint256[] memory _All_Ideas_Messages = new uint256[](_message_ids);\\r\\n    uint256 _msg_id;\\r\\n    for (uint256 i = 0; i < _message_ids; i++) {\\r\\n      if (all_messages[i].ideas_id == ideas_id) {\\r\\n        _All_Ideas_Messages[_msg_id] = all_messages[i].message_id;\\r\\n        _msg_id++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _All_Ideas_Messages;\\r\\n  }\\r\\n\\r\\n  function sendReply(uint256 _message_id, string memory _reply, uint256 ideas_id, uint256 _userid) public returns (uint256) {\\r\\n    _user_badges[_userid].reply = true;\\r\\n    //Create reply into all_replies\\r\\n    all_replies[_reply_ids] = reply_struct(_reply_ids, _message_id, ideas_id, _reply);\\r\\n    _reply_ids++;\\r\\n\\r\\n    return _reply_ids;\\r\\n  }\\r\\n\\r\\n  function getReplyIDs(uint256 message_id) public view returns (uint256[] memory) {\\r\\n    //Getting all messages ids by idea id\\r\\n    uint256[] memory _All_Messages_Replys = new uint256[](_reply_ids);\\r\\n    uint256 _reply_id;\\r\\n    for (uint256 i = 0; i < _reply_ids; i++) {\\r\\n      if (all_replies[i].message_id == message_id) {\\r\\n        _All_Messages_Replys[_reply_id] = all_replies[i].reply_id;\\r\\n        _reply_id++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _All_Messages_Replys;\\r\\n  }\\r\\n\\r\\n  function sendReadMsg(uint256 _message_id, uint256 _ideas_id, uint256 _wallet, string memory msg_type) public returns (uint256) {\\r\\n    //Create messsage into all_messages\\r\\n    all_read_messages[_message_read_ids] = message_read_struct(_message_id, _ideas_id, _wallet, msg_type);\\r\\n    _message_read_ids++;\\r\\n\\r\\n    return _message_read_ids;\\r\\n  }\\r\\n\\r\\n  function getReadMsg(uint256 _message_id, string memory msg_type) public view returns (bool) {\\r\\n    bool read = false;\\r\\n    for (uint256 i = 0; i < _message_read_ids; i++) {\\r\\n      if (all_read_messages[i].message_id == _message_id && keccak256(bytes(msg_type)) == keccak256(bytes(all_read_messages[i].msg_type))) {\\r\\n        read = true;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return read;\\r\\n  }\\r\\n\\r\\n  function reset_all() public {\\r\\n    for (uint256 i = 0; i < _dao_ids; i++) delete _dao_uris[i];\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) delete _goal_uris[i];\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) delete _ideas_uris[i];\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) delete _smart_contracts_uris[i];\\r\\n    for (uint256 i = 0; i < _message_ids; i++) delete all_messages[i];\\r\\n    for (uint256 i = 0; i < _reply_ids; i++) delete all_replies[i];\\r\\n    for (uint256 i = 0; i < _ideas_vote_ids; i++) delete all_goal_ideas_votes[i];\\r\\n    _dao_ids = 0;\\r\\n    _goal_ids = 0;\\r\\n    _ideas_ids = 0;\\r\\n    _message_ids = 0;\\r\\n    _reply_ids = 0;\\r\\n    _ideas_vote_ids = 0;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbeb8cccaf2242d2580447ff9c542328d57e54e0be5fbc45f998f81e21100eb32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614cda806100206000396000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c806387633eb2116101de578063b604efaa1161010f578063cd230809116100ad578063e32acc1a1161007c578063e32acc1a14610c22578063ec24580214610c52578063ecde324314610c70578063ff4a37ef14610ca05761038e565b8063cd23080914610b74578063d3791b2014610ba4578063d9fc52db14610bc2578063dddb6f8614610bf25761038e565b8063c04fe978116100e9578063c04fe97814610ae9578063c29595c514610b07578063ca013f1714610b23578063cace8d4614610b415761038e565b8063b604efaa14610a81578063bda0033514610ab1578063c04e743014610acd5761038e565b8063a1ca91781161017c578063aa4cdf2a11610156578063aa4cdf2a146109e4578063b16060a614610a14578063b39a38bd14610a1e578063b527d45e14610a4e5761038e565b8063a1ca91781461095e578063a428a47f1461098e578063aa2bf5d3146109c65761038e565b80638d3d2595116101b85780638d3d2595146108c25780639077007d146108f2578063934c5f001461091057806397ee7606146109405761038e565b806387633eb21461086c578063881de858146108885780638ac4110c146108a45761038e565b806354a9fb18116102c35780637bbd582d11610261578063812fae1f11610230578063812fae1f146107c0578063826eeefe146107f0578063829a5d981461080c57806386ffa45b1461083c5761038e565b80637bbd582d1461070f5780637f2035d41461072d5780637fc543ec1461075e578063803f5b9f146107905761038e565b80635d907da11161029d5780635d907da11461064f5780636ecda4ee1461067f578063787f19c7146106af5780637a82b1d6146106df5761038e565b806354a9fb18146105e45780635996278f146106175780635cd844c9146106335761038e565b806327a568b9116103305780633f87a2f41161030a5780633f87a2f414610531578063468d0c80146105645780634a797bd7146105965780634be7adb5146105b45761038e565b806327a568b9146104af57806329b56f60146104e1578063330b8f26146104ff5761038e565b80631b592aeb1161036c5780631b592aeb146103ff5780631ba44c4c1461041d5780631e9ac9f51461044f57806320959ed01461047f5761038e565b80630377d44a146103935780631171b621146103c357806313bf4cea146103e1575b600080fd5b6103ad60048036038101906103a8919061393f565b610cd2565b6040516103ba9190613ac9565b60405180910390f35b6103cb610e5c565b6040516103d89190613b04565b60405180910390f35b6103e9610e62565b6040516103f69190613b04565b60405180910390f35b610407610e68565b6040516104149190613b04565b60405180910390f35b61043760048036038101906104329190613b4b565b610e6e565b60405161044693929190613b78565b60405180910390f35b6104696004803603810190610464919061393f565b610e98565b6040516104769190613b04565b60405180910390f35b61049960048036038101906104949190613b4b565b610f09565b6040516104a69190613b04565b60405180910390f35b6104c960048036038101906104c49190613b4b565b610f21565b6040516104d893929190613bf9565b60405180910390f35b6104e96110e3565b6040516104f69190613ac9565b60405180910390f35b61051960048036038101906105149190613b4b565b61121e565b60405161052893929190613c45565b60405180910390f35b61054b60048036038101906105469190613b4b565b6112d0565b60405161055b9493929190613c83565b60405180910390f35b61057e60048036038101906105799190613b4b565b611388565b60405161058d93929190613ccf565b60405180910390f35b61059e6114c2565b6040516105ab9190613b04565b60405180910390f35b6105ce60048036038101906105c99190613d14565b6114c8565b6040516105db9190613ac9565b60405180910390f35b6105fe60048036038101906105f99190613b4b565b6115da565b60405161060e9493929190613d54565b60405180910390f35b610631600480360381019061062c9190613da7565b61171a565b005b61064d60048036038101906106489190613e5a565b6118be565b005b61066960048036038101906106649190613b4b565b6119a7565b6040516106769190613ef9565b60405180910390f35b61069960048036038101906106949190613b4b565b611a4f565b6040516106a69190613ef9565b60405180910390f35b6106c960048036038101906106c49190613f1b565b611aef565b6040516106d69190613b04565b60405180910390f35b6106f960048036038101906106f49190613d14565b611bc0565b6040516107069190613fd5565b60405180910390f35b610717611c3a565b6040516107249190613b04565b60405180910390f35b61074760048036038101906107429190613b4b565b611c40565b604051610755929190613ff0565b60405180910390f35b61077860048036038101906107739190613b4b565b611d74565b60405161078793929190613b78565b60405180910390f35b6107aa60048036038101906107a59190613b4b565b611d9e565b6040516107b791906140e5565b60405180910390f35b6107da60048036038101906107d59190613b4b565b611e81565b6040516107e791906140e5565b60405180910390f35b61080a60048036038101906108059190613b4b565b611f64565b005b6108266004803603810190610821919061393f565b611fd5565b6040516108339190613ac9565b60405180910390f35b61085660048036038101906108519190614107565b61215f565b6040516108639190613b04565b60405180910390f35b610886600480360381019061088191906141c2565b61227f565b005b6108a2600480360381019061089d919061421e565b6122a4565b005b6108ac6122f1565b6040516108b99190613b04565b60405180910390f35b6108dc60048036038101906108d79190613b4b565b6122f7565b6040516108e99190613ef9565b60405180910390f35b6108fa61239f565b6040516109079190613b04565b60405180910390f35b61092a600480360381019061092591906142a9565b6123a5565b6040516109379190613b04565b60405180910390f35b610948612439565b6040516109559190613ac9565b60405180910390f35b6109786004803603810190610973919061393f565b612574565b6040516109859190613b04565b60405180910390f35b6109a860048036038101906109a39190613b4b565b6125e5565b6040516109bd9998979695949392919061432c565b60405180910390f35b6109ce61269b565b6040516109db9190613b04565b60405180910390f35b6109fe60048036038101906109f9919061393f565b6126a1565b604051610a0b9190613ef9565b60405180910390f35b610a1c6127bb565b005b610a386004803603810190610a3391906143b9565b612a75565b604051610a459190613b04565b60405180910390f35b610a686004803603810190610a639190613b4b565b612b63565b604051610a789493929190613d54565b60405180910390f35b610a9b6004803603810190610a969190613d14565b612ca3565b604051610aa89190613b04565b60405180910390f35b610acb6004803603810190610ac69190614474565b612d1d565b005b610ae76004803603810190610ae291906141c2565b612db4565b005b610af1612ddc565b604051610afe9190613ac9565b60405180910390f35b610b216004803603810190610b1c91906141c2565b612f16565b005b610b2b612f3e565b604051610b389190613b04565b60405180910390f35b610b5b6004803603810190610b569190613b4b565b612f44565b604051610b6b9493929190613c83565b60405180910390f35b610b8e6004803603810190610b8991906141c2565b612ffc565b604051610b9b9190613fd5565b60405180910390f35b610bac61308d565b604051610bb99190613b04565b60405180910390f35b610bdc6004803603810190610bd791906144ec565b613093565b604051610be99190613b04565b60405180910390f35b610c0c6004803603810190610c079190614655565b613158565b604051610c199190613b04565b60405180910390f35b610c3c6004803603810190610c379190613b4b565b6132b9565b604051610c499190613ef9565b60405180910390f35b610c5a613361565b604051610c679190613b04565b60405180910390f35b610c8a6004803603810190610c85919061476c565b613367565b604051610c979190613b04565b60405180910390f35b610cba6004803603810190610cb59190613b4b565b613455565b604051610cc993929190613c45565b60405180910390f35b6060600060025467ffffffffffffffff811115610cf257610cf1613814565b5b604051908082528060200260200182016040528015610d2557816020015b6060815260200190600190039081610d105790505b509050600080600090505b600254811015610e51578480519060200120600e6000838152602001908152602001600020600001604051610d659190614906565b604051809103902003610e3e57600e60008281526020019081526020016000206001018054610d9390614832565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbf90614832565b8015610e0c5780601f10610de157610100808354040283529160200191610e0c565b820191906000526020600020905b815481529060010190602001808311610def57829003601f168201915b5050505050838381518110610e2457610e2361491d565b5b60200260200101819052508180610e3a9061497b565b9250505b8080610e499061497b565b915050610d30565b508192505050919050565b60045481565b60025481565b60055481565b60146020528060005260406000206000915090508060000154908060010154908060020154905083565b600080600090505b600254811015610efe578280519060200120600e6000838152602001908152602001600020600101604051610ed59190614906565b604051809103902003610eeb5780915050610f04565b8080610ef69061497b565b915050610ea0565b50600090505b919050565b60106020528060005260406000206000915090505481565b600b602052806000526040600020600091509050806000018054610f4490614832565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7090614832565b8015610fbd5780601f10610f9257610100808354040283529160200191610fbd565b820191906000526020600020905b815481529060010190602001808311610fa057829003601f168201915b505050505090806001018054610fd290614832565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffe90614832565b801561104b5780601f106110205761010080835404028352916020019161104b565b820191906000526020600020905b81548152906001019060200180831161102e57829003601f168201915b50505050509080600201805461106090614832565b80601f016020809104026020016040519081016040528092919081815260200182805461108c90614832565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b5050505050905083565b6060600060025467ffffffffffffffff81111561110357611102613814565b5b60405190808252806020026020018201604052801561113657816020015b60608152602001906001900390816111215790505b50905060005b60025481101561121657600e6000828152602001908152602001600020600101805461116790614832565b80601f016020809104026020016040519081016040528092919081815260200182805461119390614832565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b50505050508282815181106111f8576111f761491d565b5b6020026020010181905250808061120e9061497b565b91505061113c565b508091505090565b600d60205280600052604060002060009150905080600001549080600101549080600201805461124d90614832565b80601f016020809104026020016040519081016040528092919081815260200182805461127990614832565b80156112c65780601f1061129b576101008083540402835291602001916112c6565b820191906000526020600020905b8154815290600101906020018083116112a957829003601f168201915b5050505050905083565b601760205280600052604060002060009150905080600001549080600101549080600201549080600301805461130590614832565b80601f016020809104026020016040519081016040528092919081815260200182805461133190614832565b801561137e5780601f106113535761010080835404028352916020019161137e565b820191906000526020600020905b81548152906001019060200180831161136157829003601f168201915b5050505050905084565b600f6020528060005260406000206000915090508060000180546113ab90614832565b80601f01602080910402602001604051908101604052809291908181526020018280546113d790614832565b80156114245780601f106113f957610100808354040283529160200191611424565b820191906000526020600020905b81548152906001019060200180831161140757829003601f168201915b50505050509080600101805461143990614832565b80601f016020809104026020016040519081016040528092919081815260200182805461146590614832565b80156114b25780601f10611487576101008083540402835291602001916114b2565b820191906000526020600020905b81548152906001019060200180831161149557829003601f168201915b5050505050908060020154905083565b60065481565b6060600060065467ffffffffffffffff8111156114e8576114e7613814565b5b60405190808252806020026020018201604052801561151b57816020015b60608152602001906001900390816115065790505b509050600080600090505b6006548110156115ce5785601460008381526020019081526020016000206000015414801561156a5750846014600083815260200190815260200160002060010154145b156115ad5761158e6014600083815260200190815260200160002060020154613507565b8383815181106115a1576115a061491d565b5b60200260200101819052505b81806115b89061497b565b92505080806115c69061497b565b915050611526565b50819250505092915050565b601160205280600052604060002060009150905080600001549080600101549080600201805461160990614832565b80601f016020809104026020016040519081016040528092919081815260200182805461163590614832565b80156116825780601f1061165757610100808354040283529160200191611682565b820191906000526020600020905b81548152906001019060200180831161166557829003601f168201915b50505050509080600301805461169790614832565b80601f01602080910402602001604051908101604052809291908181526020018280546116c390614832565b80156117105780601f106116e557610100808354040283529160200191611710565b820191906000526020600020905b8154815290600101906020018083116116f357829003601f168201915b5050505050905084565b600015156018600085815260200190815260200160002060010160059054906101000a900460ff1615150361178957611788826040518060400160405280600581526020017f6261646765000000000000000000000000000000000000000000000000000000815250612d1d565b5b6117c8816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250612d1d565b60016018600085815260200190815260200160002060010160056101000a81548160ff02191690831515021790555083600f6000878152602001908152602001600020600201600082825461181d91906149c3565b925050819055508360106000858152602001908152602001600020600082825461184791906149c3565b92505081905550604051806060016040528086815260200184815260200185815250601260006001548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050600160008154809291906118b29061497b565b91905055505050505050565b60016018600085815260200190815260200160002060010160016101000a81548160ff021916908315150217905550604051806060016040528085815260200184815260200183815250600d60006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816119469190614ba3565b509050506004600081548092919061195d9061497b565b91905055506119a1816040518060400160405280600481526020017f6a6f696e00000000000000000000000000000000000000000000000000000000815250612d1d565b50505050565b6060600b600083815260200190815260200160002060010180546119ca90614832565b80601f01602080910402602001604051908101604052809291908181526020018280546119f690614832565b8015611a435780601f10611a1857610100808354040283529160200191611a43565b820191906000526020600020905b815481529060010190602001808311611a2657829003601f168201915b50505050509050919050565b600c6020528060005260406000206000915090508054611a6e90614832565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9a90614832565b8015611ae75780601f10611abc57610100808354040283529160200191611ae7565b820191906000526020600020905b815481529060010190602001808311611aca57829003601f168201915b505050505081565b600060016018600084815260200190815260200160002060010160066101000a81548160ff021916908315150217905550604051806080016040528060075481526020018681526020018581526020018481525060156000600754815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611b819190614ba3565b506060820151816003019081611b979190614ba3565b5090505060076000815480929190611bae9061497b565b91905055506007549050949350505050565b600080600090505b600454811015611c2e5782600d600083815260200190815260200160002060010154148015611c0c575083600d600083815260200190815260200160002060000154145b15611c1b576001915050611c34565b8080611c269061497b565b915050611bc8565b50600090505b92915050565b60005481565b600e602052806000526040600020600091509050806000018054611c6390614832565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8f90614832565b8015611cdc5780601f10611cb157610100808354040283529160200191611cdc565b820191906000526020600020905b815481529060010190602001808311611cbf57829003601f168201915b505050505090806001018054611cf190614832565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1d90614832565b8015611d6a5780601f10611d3f57610100808354040283529160200191611d6a565b820191906000526020600020905b815481529060010190602001808311611d4d57829003601f168201915b5050505050905082565b60126020528060005260406000206000915090508060000154908060010154908060020154905083565b6060600060075467ffffffffffffffff811115611dbe57611dbd613814565b5b604051908082528060200260200182016040528015611dec5781602001602082028036833780820191505090505b509050600080600090505b600754811015611e765784601560008381526020019081526020016000206001015403611e63576015600082815260200190815260200160002060000154838381518110611e4857611e4761491d565b5b6020026020010181815250508180611e5f9061497b565b9250505b8080611e6e9061497b565b915050611df7565b508192505050919050565b6060600060095467ffffffffffffffff811115611ea157611ea0613814565b5b604051908082528060200260200182016040528015611ecf5781602001602082028036833780820191505090505b509050600080600090505b600954811015611f595784601760008381526020019081526020016000206001015403611f46576017600082815260200190815260200160002060000154838381518110611f2b57611f2a61491d565b5b6020026020010181815250508180611f429061497b565b9250505b8080611f519061497b565b915050611eda565b508192505050919050565b604051806060016040528061270f815260200161270f815260200160405180602001604052806000815250815250600d600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611fce9190614ba3565b5090505050565b6060600060035467ffffffffffffffff811115611ff557611ff4613814565b5b60405190808252806020026020018201604052801561202857816020015b60608152602001906001900390816120135790505b509050600080600090505b600354811015612154578480519060200120600f60008381526020019081526020016000206000016040516120689190614906565b60405180910390200361213357600f6000828152602001908152602001600020600101805461209690614832565b80601f01602080910402602001604051908101604052809291908181526020018280546120c290614832565b801561210f5780601f106120e45761010080835404028352916020019161210f565b820191906000526020600020905b8154815290600101906020018083116120f257829003601f168201915b50505050508383815181106121275761212661491d565b5b60200260200101819052505b818061213e9061497b565b925050808061214c9061497b565b915050612033565b508192505050919050565b600060405180606001604052808681526020018581526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600b60008054815260200190815260200160002060008201518160000190816121da9190614ba3565b5060208201518160010190816121f09190614ba3565b5060408201518160020190816122069190614ba3565b5090505082600c600080548152602001908152602001600020908161222b9190614ba3565b5060016018600084815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060008081548092919061226d9061497b565b91905055506000549050949350505050565b80600c6000848152602001908152602001600020908161229f9190614ba3565b505050565b81600b600085815260200190815260200160002060000190816122c79190614ba3565b5080600b600085815260200190815260200160002060010190816122eb9190614ba3565b50505050565b600a5481565b6060600f6000838152602001908152602001600020600101805461231a90614832565b80601f016020809104026020016040519081016040528092919081815260200182805461234690614832565b80156123935780601f1061236857610100808354040283529160200191612393565b820191906000526020600020905b81548152906001019060200180831161237657829003601f168201915b50505050509050919050565b60075481565b600060405180608001604052808681526020018581526020018481526020018381525060166000600854815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190816124109190614ba3565b50905050600860008154809291906124279061497b565b91905055506008549050949350505050565b6060600060035467ffffffffffffffff81111561245957612458613814565b5b60405190808252806020026020018201604052801561248c57816020015b60608152602001906001900390816124775790505b50905060005b60035481101561256c57600f600082815260200190815260200160002060010180546124bd90614832565b80601f01602080910402602001604051908101604052809291908181526020018280546124e990614832565b80156125365780601f1061250b57610100808354040283529160200191612536565b820191906000526020600020905b81548152906001019060200180831161251957829003601f168201915b505050505082828151811061254e5761254d61491d565b5b602002602001018190525080806125649061497b565b915050612492565b508091505090565b600080600090505b6003548110156125da578280519060200120600f60008381526020019081526020016000206001016040516125b19190614906565b6040518091039020036125c757809150506125e0565b80806125d29061497b565b91505061257c565b50600090505b919050565b60186020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16908060010160039054906101000a900460ff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16908060010160079054906101000a900460ff16905089565b60095481565b606060005b6003548110156127a2578280519060200120600f60008381526020019081526020016000206001016040516126db9190614906565b60405180910390200361278f57600f6000828152602001908152602001600020600001805461270990614832565b80601f016020809104026020016040519081016040528092919081815260200182805461273590614832565b80156127825780601f1061275757610100808354040283529160200191612782565b820191906000526020600020905b81548152906001019060200180831161276557829003601f168201915b50505050509150506127b6565b808061279a9061497b565b9150506126a6565b506040518060200160405280600081525090505b919050565b60005b60005481101561282157600b6000828152602001908152602001600020600080820160006127ec9190613788565b6001820160006127fc9190613788565b60028201600061280c9190613788565b505080806128199061497b565b9150506127be565b5060005b60025481101561287857600e6000828152602001908152602001600020600080820160006128539190613788565b6001820160006128639190613788565b505080806128709061497b565b915050612825565b5060005b6003548110156128d757600f6000828152602001908152602001600020600080820160006128aa9190613788565b6001820160006128ba9190613788565b6002820160009055505080806128cf9061497b565b91505061287c565b5060005b60025481101561292e576013600082815260200190815260200160002060008082016000905560018201600090556002820160006129199190613788565b505080806129269061497b565b9150506128db565b5060005b600754811015612995576015600082815260200190815260200160002060008082016000905560018201600090556002820160006129709190613788565b6003820160006129809190613788565b5050808061298d9061497b565b915050612932565b5060005b6009548110156129f45760176000828152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006129df9190613788565b505080806129ec9061497b565b915050612999565b5060005b600654811015612a4357601460008281526020019081526020016000206000808201600090556001820160009055600282016000905550508080612a3b9061497b565b9150506129f8565b506000808190555060006002819055506000600381905550600060078190555060006009819055506000600681905550565b6000604051806040016040528085815260200186815250600e600060025481526020019081526020016000206000820151816000019081612ab69190614ba3565b506020820151816001019081612acc9190614ba3565b5090505060016018600085815260200190815260200160002060010160026101000a81548160ff02191690831515021790555060026000815480929190612b129061497b565b9190505550612b56826040518060400160405280600481526020017f676f616c00000000000000000000000000000000000000000000000000000000815250612d1d565b6002549050949350505050565b6015602052806000526040600020600091509050806000015490806001015490806002018054612b9290614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612bbe90614832565b8015612c0b5780601f10612be057610100808354040283529160200191612c0b565b820191906000526020600020905b815481529060010190602001808311612bee57829003601f168201915b505050505090806003018054612c2090614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612c4c90614832565b8015612c995780601f10612c6e57610100808354040283529160200191612c99565b820191906000526020600020905b815481529060010190602001808311612c7c57829003601f168201915b5050505050905084565b600080600090505b600454811015612d105782600d600083815260200190815260200160002060010154148015612cef575083600d600083815260200190815260200160002060000154145b15612cfd5780915050612d17565b8080612d089061497b565b915050612cab565b5061270f90505b92915050565b6040518060800160405280600a5481526020014281526020018281526020018381525060116000600a54815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612d7e9190614ba3565b506060820151816003019081612d949190614ba3565b50905050600a6000815480929190612dab9061497b565b91905055505050565b80600f60008481526020019081526020016000206001019081612dd79190614ba3565b505050565b60606000805467ffffffffffffffff811115612dfb57612dfa613814565b5b604051908082528060200260200182016040528015612e2e57816020015b6060815260200190600190039081612e195790505b50905060005b600054811015612f0e57600b60008281526020019081526020016000206001018054612e5f90614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612e8b90614832565b8015612ed85780601f10612ead57610100808354040283529160200191612ed8565b820191906000526020600020905b815481529060010190602001808311612ebb57829003601f168201915b5050505050828281518110612ef057612eef61491d565b5b60200260200101819052508080612f069061497b565b915050612e34565b508091505090565b80600e60008481526020019081526020016000206001019081612f399190614ba3565b505050565b60085481565b6016602052806000526040600020600091509050806000015490806001015490806002015490806003018054612f7990614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612fa590614832565b8015612ff25780601f10612fc757610100808354040283529160200191612ff2565b820191906000526020600020905b815481529060010190602001808311612fd557829003601f168201915b5050505050905084565b6000806000905060005b600854811015613082578460166000838152602001908152602001600020600001541480156130655750601660008281526020019081526020016000206003016040516130539190614906565b60405180910390208480519060200120145b1561306f57600191505b808061307a9061497b565b915050613006565b508091505092915050565b60035481565b600060016018600084815260200190815260200160002060010160076101000a81548160ff0219169083151502179055506040518060800160405280600954815260200186815260200184815260200185815250601760006009548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161312f9190614ba3565b50905050600960008154809291906131469061497b565b91905055506009549050949350505050565b600060405180606001604052808681526020018781526020016000815250600f6000600354815260200190815260200160002060008201518160000190816131a09190614ba3565b5060208201518160010190816131b69190614ba3565b506040820151816002015590505060016018600085815260200190815260200160002060010160036101000a81548160ff021916908315150217905550600360008154809291906132069061497b565b919050555060005b845181101561326b576132406003546005548784815181106132335761323261491d565b5b60200260200101516135d5565b600560008154809291906132539061497b565b919050555080806132639061497b565b91505061320e565b506132ab826040518060400160405280600481526020017f6964656100000000000000000000000000000000000000000000000000000000815250612d1d565b600354905095945050505050565b6060600e600083815260200190815260200160002060010180546132dc90614832565b80601f016020809104026020016040519081016040528092919081815260200182805461330890614832565b80156133555780601f1061332a57610100808354040283529160200191613355565b820191906000526020600020905b81548152906001019060200180831161333857829003601f168201915b50505050509050919050565b60015481565b600060016018600086815260200190815260200160002060010160046101000a81548160ff021916908315150217905550604051806060016040528087815260200186815260200185815250601460006006548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050600660008154809291906133fc9061497b565b9190505550811561344757613446836040518060400160405280600481526020017f766f746500000000000000000000000000000000000000000000000000000000815250612d1d565b5b600654905095945050505050565b601360205280600052604060002060009150905080600001549080600101549080600201805461348490614832565b80601f01602080910402602001604051908101604052809291908181526020018280546134b090614832565b80156134fd5780601f106134d2576101008083540402835291602001916134fd565b820191906000526020600020905b8154815290600101906020018083116134e057829003601f168201915b5050505050905083565b60606000600161351684613635565b01905060008167ffffffffffffffff81111561353557613534613814565b5b6040519080825280601f01601f1916602001820160405280156135675781602001600182028036833780820191505090505b509050600082602001820190505b6001156135ca578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816135be576135bd614c75565b5b04945060008503613575575b819350505050919050565b604051806060016040528084815260200183815260200182815250601360008481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908161362c9190614ba3565b50905050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613693577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161368957613688614c75565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106136d0576d04ee2d6d415b85acef810000000083816136c6576136c5614c75565b5b0492506020810190505b662386f26fc1000083106136ff57662386f26fc1000083816136f5576136f4614c75565b5b0492506010810190505b6305f5e1008310613728576305f5e100838161371e5761371d614c75565b5b0492506008810190505b612710831061374d57612710838161374357613742614c75565b5b0492506004810190505b60648310613770576064838161376657613765614c75565b5b0492506002810190505b600a831061377f576001810190505b80915050919050565b50805461379490614832565b6000825580601f106137a657506137c5565b601f0160209004906000526020600020908101906137c491906137c8565b5b50565b5b808211156137e15760008160009055506001016137c9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61384c82613803565b810181811067ffffffffffffffff8211171561386b5761386a613814565b5b80604052505050565b600061387e6137e5565b905061388a8282613843565b919050565b600067ffffffffffffffff8211156138aa576138a9613814565b5b6138b382613803565b9050602081019050919050565b82818337600083830152505050565b60006138e26138dd8461388f565b613874565b9050828152602081018484840111156138fe576138fd6137fe565b5b6139098482856138c0565b509392505050565b600082601f830112613926576139256137f9565b5b81356139368482602086016138cf565b91505092915050565b600060208284031215613955576139546137ef565b5b600082013567ffffffffffffffff811115613973576139726137f4565b5b61397f84828501613911565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139ee5780820151818401526020810190506139d3565b60008484015250505050565b6000613a05826139b4565b613a0f81856139bf565b9350613a1f8185602086016139d0565b613a2881613803565b840191505092915050565b6000613a3f83836139fa565b905092915050565b6000602082019050919050565b6000613a5f82613988565b613a698185613993565b935083602082028501613a7b856139a4565b8060005b85811015613ab75784840389528151613a988582613a33565b9450613aa383613a47565b925060208a01995050600181019050613a7f565b50829750879550505050505092915050565b60006020820190508181036000830152613ae38184613a54565b905092915050565b6000819050919050565b613afe81613aeb565b82525050565b6000602082019050613b196000830184613af5565b92915050565b613b2881613aeb565b8114613b3357600080fd5b50565b600081359050613b4581613b1f565b92915050565b600060208284031215613b6157613b606137ef565b5b6000613b6f84828501613b36565b91505092915050565b6000606082019050613b8d6000830186613af5565b613b9a6020830185613af5565b613ba76040830184613af5565b949350505050565b600082825260208201905092915050565b6000613bcb826139b4565b613bd58185613baf565b9350613be58185602086016139d0565b613bee81613803565b840191505092915050565b60006060820190508181036000830152613c138186613bc0565b90508181036020830152613c278185613bc0565b90508181036040830152613c3b8184613bc0565b9050949350505050565b6000606082019050613c5a6000830186613af5565b613c676020830185613af5565b8181036040830152613c798184613bc0565b9050949350505050565b6000608082019050613c986000830187613af5565b613ca56020830186613af5565b613cb26040830185613af5565b8181036060830152613cc48184613bc0565b905095945050505050565b60006060820190508181036000830152613ce98186613bc0565b90508181036020830152613cfd8185613bc0565b9050613d0c6040830184613af5565b949350505050565b60008060408385031215613d2b57613d2a6137ef565b5b6000613d3985828601613b36565b9250506020613d4a85828601613b36565b9150509250929050565b6000608082019050613d696000830187613af5565b613d766020830186613af5565b8181036040830152613d888185613bc0565b90508181036060830152613d9c8184613bc0565b905095945050505050565b600080600080600060a08688031215613dc357613dc26137ef565b5b6000613dd188828901613b36565b9550506020613de288828901613b36565b9450506040613df388828901613b36565b935050606086013567ffffffffffffffff811115613e1457613e136137f4565b5b613e2088828901613911565b925050608086013567ffffffffffffffff811115613e4157613e406137f4565b5b613e4d88828901613911565b9150509295509295909350565b60008060008060808587031215613e7457613e736137ef565b5b6000613e8287828801613b36565b9450506020613e9387828801613b36565b935050604085013567ffffffffffffffff811115613eb457613eb36137f4565b5b613ec087828801613911565b925050606085013567ffffffffffffffff811115613ee157613ee06137f4565b5b613eed87828801613911565b91505092959194509250565b60006020820190508181036000830152613f138184613bc0565b905092915050565b60008060008060808587031215613f3557613f346137ef565b5b6000613f4387828801613b36565b945050602085013567ffffffffffffffff811115613f6457613f636137f4565b5b613f7087828801613911565b935050604085013567ffffffffffffffff811115613f9157613f906137f4565b5b613f9d87828801613911565b9250506060613fae87828801613b36565b91505092959194509250565b60008115159050919050565b613fcf81613fba565b82525050565b6000602082019050613fea6000830184613fc6565b92915050565b6000604082019050818103600083015261400a8185613bc0565b9050818103602083015261401e8184613bc0565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61405c81613aeb565b82525050565b600061406e8383614053565b60208301905092915050565b6000602082019050919050565b600061409282614027565b61409c8185614032565b93506140a783614043565b8060005b838110156140d85781516140bf8882614062565b97506140ca8361407a565b9250506001810190506140ab565b5085935050505092915050565b600060208201905081810360008301526140ff8184614087565b905092915050565b60008060008060808587031215614121576141206137ef565b5b600085013567ffffffffffffffff81111561413f5761413e6137f4565b5b61414b87828801613911565b945050602085013567ffffffffffffffff81111561416c5761416b6137f4565b5b61417887828801613911565b935050604085013567ffffffffffffffff811115614199576141986137f4565b5b6141a587828801613911565b92505060606141b687828801613b36565b91505092959194509250565b600080604083850312156141d9576141d86137ef565b5b60006141e785828601613b36565b925050602083013567ffffffffffffffff811115614208576142076137f4565b5b61421485828601613911565b9150509250929050565b600080600060608486031215614237576142366137ef565b5b600061424586828701613b36565b935050602084013567ffffffffffffffff811115614266576142656137f4565b5b61427286828701613911565b925050604084013567ffffffffffffffff811115614293576142926137f4565b5b61429f86828701613911565b9150509250925092565b600080600080608085870312156142c3576142c26137ef565b5b60006142d187828801613b36565b94505060206142e287828801613b36565b93505060406142f387828801613b36565b925050606085013567ffffffffffffffff811115614314576143136137f4565b5b61432087828801613911565b91505092959194509250565b600061012082019050614342600083018c613af5565b61434f602083018b613fc6565b61435c604083018a613fc6565b6143696060830189613fc6565b6143766080830188613fc6565b61438360a0830187613fc6565b61439060c0830186613fc6565b61439d60e0830185613fc6565b6143ab610100830184613fc6565b9a9950505050505050505050565b600080600080608085870312156143d3576143d26137ef565b5b600085013567ffffffffffffffff8111156143f1576143f06137f4565b5b6143fd87828801613911565b945050602085013567ffffffffffffffff81111561441e5761441d6137f4565b5b61442a87828801613911565b935050604061443b87828801613b36565b925050606085013567ffffffffffffffff81111561445c5761445b6137f4565b5b61446887828801613911565b91505092959194509250565b6000806040838503121561448b5761448a6137ef565b5b600083013567ffffffffffffffff8111156144a9576144a86137f4565b5b6144b585828601613911565b925050602083013567ffffffffffffffff8111156144d6576144d56137f4565b5b6144e285828601613911565b9150509250929050565b60008060008060808587031215614506576145056137ef565b5b600061451487828801613b36565b945050602085013567ffffffffffffffff811115614535576145346137f4565b5b61454187828801613911565b935050604061455287828801613b36565b925050606061456387828801613b36565b91505092959194509250565b600067ffffffffffffffff82111561458a57614589613814565b5b602082029050602081019050919050565b600080fd5b60006145b36145ae8461456f565b613874565b905080838252602082019050602084028301858111156145d6576145d561459b565b5b835b8181101561461d57803567ffffffffffffffff8111156145fb576145fa6137f9565b5b8086016146088982613911565b855260208501945050506020810190506145d8565b5050509392505050565b600082601f83011261463c5761463b6137f9565b5b813561464c8482602086016145a0565b91505092915050565b600080600080600060a08688031215614671576146706137ef565b5b600086013567ffffffffffffffff81111561468f5761468e6137f4565b5b61469b88828901613911565b955050602086013567ffffffffffffffff8111156146bc576146bb6137f4565b5b6146c888828901613911565b945050604086013567ffffffffffffffff8111156146e9576146e86137f4565b5b6146f588828901614627565b935050606061470688828901613b36565b925050608086013567ffffffffffffffff811115614727576147266137f4565b5b61473388828901613911565b9150509295509295909350565b61474981613fba565b811461475457600080fd5b50565b60008135905061476681614740565b92915050565b600080600080600060a08688031215614788576147876137ef565b5b600061479688828901613b36565b95505060206147a788828901613b36565b94505060406147b888828901613b36565b935050606086013567ffffffffffffffff8111156147d9576147d86137f4565b5b6147e588828901613911565b92505060806147f688828901614757565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061484a57607f821691505b60208210810361485d5761485c614803565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461489081614832565b61489a8186614863565b945060018216600081146148b557600181146148ca576148fd565b60ff19831686528115158202860193506148fd565b6148d38561486e565b60005b838110156148f5578154818901526001820191506020810190506148d6565b838801955050505b50505092915050565b60006149128284614883565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061498682613aeb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036149b8576149b761494c565b5b600182019050919050565b60006149ce82613aeb565b91506149d983613aeb565b92508282019050808211156149f1576149f061494c565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614a597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614a1c565b614a638683614a1c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614aa0614a9b614a9684613aeb565b614a7b565b613aeb565b9050919050565b6000819050919050565b614aba83614a85565b614ace614ac682614aa7565b848454614a29565b825550505050565b600090565b614ae3614ad6565b614aee818484614ab1565b505050565b5b81811015614b1257614b07600082614adb565b600181019050614af4565b5050565b601f821115614b5757614b28816149f7565b614b3184614a0c565b81016020851015614b40578190505b614b54614b4c85614a0c565b830182614af3565b50505b505050565b600082821c905092915050565b6000614b7a60001984600802614b5c565b1980831691505092915050565b6000614b938383614b69565b9150826002028217905092915050565b614bac826139b4565b67ffffffffffffffff811115614bc557614bc4613814565b5b614bcf8254614832565b614bda828285614b16565b600060209050601f831160018114614c0d5760008415614bfb578287015190505b614c058582614b87565b865550614c6d565b601f198416614c1b866149f7565b60005b82811015614c4357848901518255600182019150602085019450602081019050614c1e565b86831015614c605784890151614c5c601f891682614b69565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220bb882762488fe67c489670815db1d712a697f420ccc118045e40b849da54b47f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c806387633eb2116101de578063b604efaa1161010f578063cd230809116100ad578063e32acc1a1161007c578063e32acc1a14610c22578063ec24580214610c52578063ecde324314610c70578063ff4a37ef14610ca05761038e565b8063cd23080914610b74578063d3791b2014610ba4578063d9fc52db14610bc2578063dddb6f8614610bf25761038e565b8063c04fe978116100e9578063c04fe97814610ae9578063c29595c514610b07578063ca013f1714610b23578063cace8d4614610b415761038e565b8063b604efaa14610a81578063bda0033514610ab1578063c04e743014610acd5761038e565b8063a1ca91781161017c578063aa4cdf2a11610156578063aa4cdf2a146109e4578063b16060a614610a14578063b39a38bd14610a1e578063b527d45e14610a4e5761038e565b8063a1ca91781461095e578063a428a47f1461098e578063aa2bf5d3146109c65761038e565b80638d3d2595116101b85780638d3d2595146108c25780639077007d146108f2578063934c5f001461091057806397ee7606146109405761038e565b806387633eb21461086c578063881de858146108885780638ac4110c146108a45761038e565b806354a9fb18116102c35780637bbd582d11610261578063812fae1f11610230578063812fae1f146107c0578063826eeefe146107f0578063829a5d981461080c57806386ffa45b1461083c5761038e565b80637bbd582d1461070f5780637f2035d41461072d5780637fc543ec1461075e578063803f5b9f146107905761038e565b80635d907da11161029d5780635d907da11461064f5780636ecda4ee1461067f578063787f19c7146106af5780637a82b1d6146106df5761038e565b806354a9fb18146105e45780635996278f146106175780635cd844c9146106335761038e565b806327a568b9116103305780633f87a2f41161030a5780633f87a2f414610531578063468d0c80146105645780634a797bd7146105965780634be7adb5146105b45761038e565b806327a568b9146104af57806329b56f60146104e1578063330b8f26146104ff5761038e565b80631b592aeb1161036c5780631b592aeb146103ff5780631ba44c4c1461041d5780631e9ac9f51461044f57806320959ed01461047f5761038e565b80630377d44a146103935780631171b621146103c357806313bf4cea146103e1575b600080fd5b6103ad60048036038101906103a8919061393f565b610cd2565b6040516103ba9190613ac9565b60405180910390f35b6103cb610e5c565b6040516103d89190613b04565b60405180910390f35b6103e9610e62565b6040516103f69190613b04565b60405180910390f35b610407610e68565b6040516104149190613b04565b60405180910390f35b61043760048036038101906104329190613b4b565b610e6e565b60405161044693929190613b78565b60405180910390f35b6104696004803603810190610464919061393f565b610e98565b6040516104769190613b04565b60405180910390f35b61049960048036038101906104949190613b4b565b610f09565b6040516104a69190613b04565b60405180910390f35b6104c960048036038101906104c49190613b4b565b610f21565b6040516104d893929190613bf9565b60405180910390f35b6104e96110e3565b6040516104f69190613ac9565b60405180910390f35b61051960048036038101906105149190613b4b565b61121e565b60405161052893929190613c45565b60405180910390f35b61054b60048036038101906105469190613b4b565b6112d0565b60405161055b9493929190613c83565b60405180910390f35b61057e60048036038101906105799190613b4b565b611388565b60405161058d93929190613ccf565b60405180910390f35b61059e6114c2565b6040516105ab9190613b04565b60405180910390f35b6105ce60048036038101906105c99190613d14565b6114c8565b6040516105db9190613ac9565b60405180910390f35b6105fe60048036038101906105f99190613b4b565b6115da565b60405161060e9493929190613d54565b60405180910390f35b610631600480360381019061062c9190613da7565b61171a565b005b61064d60048036038101906106489190613e5a565b6118be565b005b61066960048036038101906106649190613b4b565b6119a7565b6040516106769190613ef9565b60405180910390f35b61069960048036038101906106949190613b4b565b611a4f565b6040516106a69190613ef9565b60405180910390f35b6106c960048036038101906106c49190613f1b565b611aef565b6040516106d69190613b04565b60405180910390f35b6106f960048036038101906106f49190613d14565b611bc0565b6040516107069190613fd5565b60405180910390f35b610717611c3a565b6040516107249190613b04565b60405180910390f35b61074760048036038101906107429190613b4b565b611c40565b604051610755929190613ff0565b60405180910390f35b61077860048036038101906107739190613b4b565b611d74565b60405161078793929190613b78565b60405180910390f35b6107aa60048036038101906107a59190613b4b565b611d9e565b6040516107b791906140e5565b60405180910390f35b6107da60048036038101906107d59190613b4b565b611e81565b6040516107e791906140e5565b60405180910390f35b61080a60048036038101906108059190613b4b565b611f64565b005b6108266004803603810190610821919061393f565b611fd5565b6040516108339190613ac9565b60405180910390f35b61085660048036038101906108519190614107565b61215f565b6040516108639190613b04565b60405180910390f35b610886600480360381019061088191906141c2565b61227f565b005b6108a2600480360381019061089d919061421e565b6122a4565b005b6108ac6122f1565b6040516108b99190613b04565b60405180910390f35b6108dc60048036038101906108d79190613b4b565b6122f7565b6040516108e99190613ef9565b60405180910390f35b6108fa61239f565b6040516109079190613b04565b60405180910390f35b61092a600480360381019061092591906142a9565b6123a5565b6040516109379190613b04565b60405180910390f35b610948612439565b6040516109559190613ac9565b60405180910390f35b6109786004803603810190610973919061393f565b612574565b6040516109859190613b04565b60405180910390f35b6109a860048036038101906109a39190613b4b565b6125e5565b6040516109bd9998979695949392919061432c565b60405180910390f35b6109ce61269b565b6040516109db9190613b04565b60405180910390f35b6109fe60048036038101906109f9919061393f565b6126a1565b604051610a0b9190613ef9565b60405180910390f35b610a1c6127bb565b005b610a386004803603810190610a3391906143b9565b612a75565b604051610a459190613b04565b60405180910390f35b610a686004803603810190610a639190613b4b565b612b63565b604051610a789493929190613d54565b60405180910390f35b610a9b6004803603810190610a969190613d14565b612ca3565b604051610aa89190613b04565b60405180910390f35b610acb6004803603810190610ac69190614474565b612d1d565b005b610ae76004803603810190610ae291906141c2565b612db4565b005b610af1612ddc565b604051610afe9190613ac9565b60405180910390f35b610b216004803603810190610b1c91906141c2565b612f16565b005b610b2b612f3e565b604051610b389190613b04565b60405180910390f35b610b5b6004803603810190610b569190613b4b565b612f44565b604051610b6b9493929190613c83565b60405180910390f35b610b8e6004803603810190610b8991906141c2565b612ffc565b604051610b9b9190613fd5565b60405180910390f35b610bac61308d565b604051610bb99190613b04565b60405180910390f35b610bdc6004803603810190610bd791906144ec565b613093565b604051610be99190613b04565b60405180910390f35b610c0c6004803603810190610c079190614655565b613158565b604051610c199190613b04565b60405180910390f35b610c3c6004803603810190610c379190613b4b565b6132b9565b604051610c499190613ef9565b60405180910390f35b610c5a613361565b604051610c679190613b04565b60405180910390f35b610c8a6004803603810190610c85919061476c565b613367565b604051610c979190613b04565b60405180910390f35b610cba6004803603810190610cb59190613b4b565b613455565b604051610cc993929190613c45565b60405180910390f35b6060600060025467ffffffffffffffff811115610cf257610cf1613814565b5b604051908082528060200260200182016040528015610d2557816020015b6060815260200190600190039081610d105790505b509050600080600090505b600254811015610e51578480519060200120600e6000838152602001908152602001600020600001604051610d659190614906565b604051809103902003610e3e57600e60008281526020019081526020016000206001018054610d9390614832565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbf90614832565b8015610e0c5780601f10610de157610100808354040283529160200191610e0c565b820191906000526020600020905b815481529060010190602001808311610def57829003601f168201915b5050505050838381518110610e2457610e2361491d565b5b60200260200101819052508180610e3a9061497b565b9250505b8080610e499061497b565b915050610d30565b508192505050919050565b60045481565b60025481565b60055481565b60146020528060005260406000206000915090508060000154908060010154908060020154905083565b600080600090505b600254811015610efe578280519060200120600e6000838152602001908152602001600020600101604051610ed59190614906565b604051809103902003610eeb5780915050610f04565b8080610ef69061497b565b915050610ea0565b50600090505b919050565b60106020528060005260406000206000915090505481565b600b602052806000526040600020600091509050806000018054610f4490614832565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7090614832565b8015610fbd5780601f10610f9257610100808354040283529160200191610fbd565b820191906000526020600020905b815481529060010190602001808311610fa057829003601f168201915b505050505090806001018054610fd290614832565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffe90614832565b801561104b5780601f106110205761010080835404028352916020019161104b565b820191906000526020600020905b81548152906001019060200180831161102e57829003601f168201915b50505050509080600201805461106090614832565b80601f016020809104026020016040519081016040528092919081815260200182805461108c90614832565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b5050505050905083565b6060600060025467ffffffffffffffff81111561110357611102613814565b5b60405190808252806020026020018201604052801561113657816020015b60608152602001906001900390816111215790505b50905060005b60025481101561121657600e6000828152602001908152602001600020600101805461116790614832565b80601f016020809104026020016040519081016040528092919081815260200182805461119390614832565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b50505050508282815181106111f8576111f761491d565b5b6020026020010181905250808061120e9061497b565b91505061113c565b508091505090565b600d60205280600052604060002060009150905080600001549080600101549080600201805461124d90614832565b80601f016020809104026020016040519081016040528092919081815260200182805461127990614832565b80156112c65780601f1061129b576101008083540402835291602001916112c6565b820191906000526020600020905b8154815290600101906020018083116112a957829003601f168201915b5050505050905083565b601760205280600052604060002060009150905080600001549080600101549080600201549080600301805461130590614832565b80601f016020809104026020016040519081016040528092919081815260200182805461133190614832565b801561137e5780601f106113535761010080835404028352916020019161137e565b820191906000526020600020905b81548152906001019060200180831161136157829003601f168201915b5050505050905084565b600f6020528060005260406000206000915090508060000180546113ab90614832565b80601f01602080910402602001604051908101604052809291908181526020018280546113d790614832565b80156114245780601f106113f957610100808354040283529160200191611424565b820191906000526020600020905b81548152906001019060200180831161140757829003601f168201915b50505050509080600101805461143990614832565b80601f016020809104026020016040519081016040528092919081815260200182805461146590614832565b80156114b25780601f10611487576101008083540402835291602001916114b2565b820191906000526020600020905b81548152906001019060200180831161149557829003601f168201915b5050505050908060020154905083565b60065481565b6060600060065467ffffffffffffffff8111156114e8576114e7613814565b5b60405190808252806020026020018201604052801561151b57816020015b60608152602001906001900390816115065790505b509050600080600090505b6006548110156115ce5785601460008381526020019081526020016000206000015414801561156a5750846014600083815260200190815260200160002060010154145b156115ad5761158e6014600083815260200190815260200160002060020154613507565b8383815181106115a1576115a061491d565b5b60200260200101819052505b81806115b89061497b565b92505080806115c69061497b565b915050611526565b50819250505092915050565b601160205280600052604060002060009150905080600001549080600101549080600201805461160990614832565b80601f016020809104026020016040519081016040528092919081815260200182805461163590614832565b80156116825780601f1061165757610100808354040283529160200191611682565b820191906000526020600020905b81548152906001019060200180831161166557829003601f168201915b50505050509080600301805461169790614832565b80601f01602080910402602001604051908101604052809291908181526020018280546116c390614832565b80156117105780601f106116e557610100808354040283529160200191611710565b820191906000526020600020905b8154815290600101906020018083116116f357829003601f168201915b5050505050905084565b600015156018600085815260200190815260200160002060010160059054906101000a900460ff1615150361178957611788826040518060400160405280600581526020017f6261646765000000000000000000000000000000000000000000000000000000815250612d1d565b5b6117c8816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250612d1d565b60016018600085815260200190815260200160002060010160056101000a81548160ff02191690831515021790555083600f6000878152602001908152602001600020600201600082825461181d91906149c3565b925050819055508360106000858152602001908152602001600020600082825461184791906149c3565b92505081905550604051806060016040528086815260200184815260200185815250601260006001548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050600160008154809291906118b29061497b565b91905055505050505050565b60016018600085815260200190815260200160002060010160016101000a81548160ff021916908315150217905550604051806060016040528085815260200184815260200183815250600d60006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816119469190614ba3565b509050506004600081548092919061195d9061497b565b91905055506119a1816040518060400160405280600481526020017f6a6f696e00000000000000000000000000000000000000000000000000000000815250612d1d565b50505050565b6060600b600083815260200190815260200160002060010180546119ca90614832565b80601f01602080910402602001604051908101604052809291908181526020018280546119f690614832565b8015611a435780601f10611a1857610100808354040283529160200191611a43565b820191906000526020600020905b815481529060010190602001808311611a2657829003601f168201915b50505050509050919050565b600c6020528060005260406000206000915090508054611a6e90614832565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9a90614832565b8015611ae75780601f10611abc57610100808354040283529160200191611ae7565b820191906000526020600020905b815481529060010190602001808311611aca57829003601f168201915b505050505081565b600060016018600084815260200190815260200160002060010160066101000a81548160ff021916908315150217905550604051806080016040528060075481526020018681526020018581526020018481525060156000600754815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611b819190614ba3565b506060820151816003019081611b979190614ba3565b5090505060076000815480929190611bae9061497b565b91905055506007549050949350505050565b600080600090505b600454811015611c2e5782600d600083815260200190815260200160002060010154148015611c0c575083600d600083815260200190815260200160002060000154145b15611c1b576001915050611c34565b8080611c269061497b565b915050611bc8565b50600090505b92915050565b60005481565b600e602052806000526040600020600091509050806000018054611c6390614832565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8f90614832565b8015611cdc5780601f10611cb157610100808354040283529160200191611cdc565b820191906000526020600020905b815481529060010190602001808311611cbf57829003601f168201915b505050505090806001018054611cf190614832565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1d90614832565b8015611d6a5780601f10611d3f57610100808354040283529160200191611d6a565b820191906000526020600020905b815481529060010190602001808311611d4d57829003601f168201915b5050505050905082565b60126020528060005260406000206000915090508060000154908060010154908060020154905083565b6060600060075467ffffffffffffffff811115611dbe57611dbd613814565b5b604051908082528060200260200182016040528015611dec5781602001602082028036833780820191505090505b509050600080600090505b600754811015611e765784601560008381526020019081526020016000206001015403611e63576015600082815260200190815260200160002060000154838381518110611e4857611e4761491d565b5b6020026020010181815250508180611e5f9061497b565b9250505b8080611e6e9061497b565b915050611df7565b508192505050919050565b6060600060095467ffffffffffffffff811115611ea157611ea0613814565b5b604051908082528060200260200182016040528015611ecf5781602001602082028036833780820191505090505b509050600080600090505b600954811015611f595784601760008381526020019081526020016000206001015403611f46576017600082815260200190815260200160002060000154838381518110611f2b57611f2a61491d565b5b6020026020010181815250508180611f429061497b565b9250505b8080611f519061497b565b915050611eda565b508192505050919050565b604051806060016040528061270f815260200161270f815260200160405180602001604052806000815250815250600d600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611fce9190614ba3565b5090505050565b6060600060035467ffffffffffffffff811115611ff557611ff4613814565b5b60405190808252806020026020018201604052801561202857816020015b60608152602001906001900390816120135790505b509050600080600090505b600354811015612154578480519060200120600f60008381526020019081526020016000206000016040516120689190614906565b60405180910390200361213357600f6000828152602001908152602001600020600101805461209690614832565b80601f01602080910402602001604051908101604052809291908181526020018280546120c290614832565b801561210f5780601f106120e45761010080835404028352916020019161210f565b820191906000526020600020905b8154815290600101906020018083116120f257829003601f168201915b50505050508383815181106121275761212661491d565b5b60200260200101819052505b818061213e9061497b565b925050808061214c9061497b565b915050612033565b508192505050919050565b600060405180606001604052808681526020018581526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600b60008054815260200190815260200160002060008201518160000190816121da9190614ba3565b5060208201518160010190816121f09190614ba3565b5060408201518160020190816122069190614ba3565b5090505082600c600080548152602001908152602001600020908161222b9190614ba3565b5060016018600084815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060008081548092919061226d9061497b565b91905055506000549050949350505050565b80600c6000848152602001908152602001600020908161229f9190614ba3565b505050565b81600b600085815260200190815260200160002060000190816122c79190614ba3565b5080600b600085815260200190815260200160002060010190816122eb9190614ba3565b50505050565b600a5481565b6060600f6000838152602001908152602001600020600101805461231a90614832565b80601f016020809104026020016040519081016040528092919081815260200182805461234690614832565b80156123935780601f1061236857610100808354040283529160200191612393565b820191906000526020600020905b81548152906001019060200180831161237657829003601f168201915b50505050509050919050565b60075481565b600060405180608001604052808681526020018581526020018481526020018381525060166000600854815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190816124109190614ba3565b50905050600860008154809291906124279061497b565b91905055506008549050949350505050565b6060600060035467ffffffffffffffff81111561245957612458613814565b5b60405190808252806020026020018201604052801561248c57816020015b60608152602001906001900390816124775790505b50905060005b60035481101561256c57600f600082815260200190815260200160002060010180546124bd90614832565b80601f01602080910402602001604051908101604052809291908181526020018280546124e990614832565b80156125365780601f1061250b57610100808354040283529160200191612536565b820191906000526020600020905b81548152906001019060200180831161251957829003601f168201915b505050505082828151811061254e5761254d61491d565b5b602002602001018190525080806125649061497b565b915050612492565b508091505090565b600080600090505b6003548110156125da578280519060200120600f60008381526020019081526020016000206001016040516125b19190614906565b6040518091039020036125c757809150506125e0565b80806125d29061497b565b91505061257c565b50600090505b919050565b60186020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16908060010160039054906101000a900460ff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16908060010160079054906101000a900460ff16905089565b60095481565b606060005b6003548110156127a2578280519060200120600f60008381526020019081526020016000206001016040516126db9190614906565b60405180910390200361278f57600f6000828152602001908152602001600020600001805461270990614832565b80601f016020809104026020016040519081016040528092919081815260200182805461273590614832565b80156127825780601f1061275757610100808354040283529160200191612782565b820191906000526020600020905b81548152906001019060200180831161276557829003601f168201915b50505050509150506127b6565b808061279a9061497b565b9150506126a6565b506040518060200160405280600081525090505b919050565b60005b60005481101561282157600b6000828152602001908152602001600020600080820160006127ec9190613788565b6001820160006127fc9190613788565b60028201600061280c9190613788565b505080806128199061497b565b9150506127be565b5060005b60025481101561287857600e6000828152602001908152602001600020600080820160006128539190613788565b6001820160006128639190613788565b505080806128709061497b565b915050612825565b5060005b6003548110156128d757600f6000828152602001908152602001600020600080820160006128aa9190613788565b6001820160006128ba9190613788565b6002820160009055505080806128cf9061497b565b91505061287c565b5060005b60025481101561292e576013600082815260200190815260200160002060008082016000905560018201600090556002820160006129199190613788565b505080806129269061497b565b9150506128db565b5060005b600754811015612995576015600082815260200190815260200160002060008082016000905560018201600090556002820160006129709190613788565b6003820160006129809190613788565b5050808061298d9061497b565b915050612932565b5060005b6009548110156129f45760176000828152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006129df9190613788565b505080806129ec9061497b565b915050612999565b5060005b600654811015612a4357601460008281526020019081526020016000206000808201600090556001820160009055600282016000905550508080612a3b9061497b565b9150506129f8565b506000808190555060006002819055506000600381905550600060078190555060006009819055506000600681905550565b6000604051806040016040528085815260200186815250600e600060025481526020019081526020016000206000820151816000019081612ab69190614ba3565b506020820151816001019081612acc9190614ba3565b5090505060016018600085815260200190815260200160002060010160026101000a81548160ff02191690831515021790555060026000815480929190612b129061497b565b9190505550612b56826040518060400160405280600481526020017f676f616c00000000000000000000000000000000000000000000000000000000815250612d1d565b6002549050949350505050565b6015602052806000526040600020600091509050806000015490806001015490806002018054612b9290614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612bbe90614832565b8015612c0b5780601f10612be057610100808354040283529160200191612c0b565b820191906000526020600020905b815481529060010190602001808311612bee57829003601f168201915b505050505090806003018054612c2090614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612c4c90614832565b8015612c995780601f10612c6e57610100808354040283529160200191612c99565b820191906000526020600020905b815481529060010190602001808311612c7c57829003601f168201915b5050505050905084565b600080600090505b600454811015612d105782600d600083815260200190815260200160002060010154148015612cef575083600d600083815260200190815260200160002060000154145b15612cfd5780915050612d17565b8080612d089061497b565b915050612cab565b5061270f90505b92915050565b6040518060800160405280600a5481526020014281526020018281526020018381525060116000600a54815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612d7e9190614ba3565b506060820151816003019081612d949190614ba3565b50905050600a6000815480929190612dab9061497b565b91905055505050565b80600f60008481526020019081526020016000206001019081612dd79190614ba3565b505050565b60606000805467ffffffffffffffff811115612dfb57612dfa613814565b5b604051908082528060200260200182016040528015612e2e57816020015b6060815260200190600190039081612e195790505b50905060005b600054811015612f0e57600b60008281526020019081526020016000206001018054612e5f90614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612e8b90614832565b8015612ed85780601f10612ead57610100808354040283529160200191612ed8565b820191906000526020600020905b815481529060010190602001808311612ebb57829003601f168201915b5050505050828281518110612ef057612eef61491d565b5b60200260200101819052508080612f069061497b565b915050612e34565b508091505090565b80600e60008481526020019081526020016000206001019081612f399190614ba3565b505050565b60085481565b6016602052806000526040600020600091509050806000015490806001015490806002015490806003018054612f7990614832565b80601f0160208091040260200160405190810160405280929190818152602001828054612fa590614832565b8015612ff25780601f10612fc757610100808354040283529160200191612ff2565b820191906000526020600020905b815481529060010190602001808311612fd557829003601f168201915b5050505050905084565b6000806000905060005b600854811015613082578460166000838152602001908152602001600020600001541480156130655750601660008281526020019081526020016000206003016040516130539190614906565b60405180910390208480519060200120145b1561306f57600191505b808061307a9061497b565b915050613006565b508091505092915050565b60035481565b600060016018600084815260200190815260200160002060010160076101000a81548160ff0219169083151502179055506040518060800160405280600954815260200186815260200184815260200185815250601760006009548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161312f9190614ba3565b50905050600960008154809291906131469061497b565b91905055506009549050949350505050565b600060405180606001604052808681526020018781526020016000815250600f6000600354815260200190815260200160002060008201518160000190816131a09190614ba3565b5060208201518160010190816131b69190614ba3565b506040820151816002015590505060016018600085815260200190815260200160002060010160036101000a81548160ff021916908315150217905550600360008154809291906132069061497b565b919050555060005b845181101561326b576132406003546005548784815181106132335761323261491d565b5b60200260200101516135d5565b600560008154809291906132539061497b565b919050555080806132639061497b565b91505061320e565b506132ab826040518060400160405280600481526020017f6964656100000000000000000000000000000000000000000000000000000000815250612d1d565b600354905095945050505050565b6060600e600083815260200190815260200160002060010180546132dc90614832565b80601f016020809104026020016040519081016040528092919081815260200182805461330890614832565b80156133555780601f1061332a57610100808354040283529160200191613355565b820191906000526020600020905b81548152906001019060200180831161333857829003601f168201915b50505050509050919050565b60015481565b600060016018600086815260200190815260200160002060010160046101000a81548160ff021916908315150217905550604051806060016040528087815260200186815260200185815250601460006006548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050600660008154809291906133fc9061497b565b9190505550811561344757613446836040518060400160405280600481526020017f766f746500000000000000000000000000000000000000000000000000000000815250612d1d565b5b600654905095945050505050565b601360205280600052604060002060009150905080600001549080600101549080600201805461348490614832565b80601f01602080910402602001604051908101604052809291908181526020018280546134b090614832565b80156134fd5780601f106134d2576101008083540402835291602001916134fd565b820191906000526020600020905b8154815290600101906020018083116134e057829003601f168201915b5050505050905083565b60606000600161351684613635565b01905060008167ffffffffffffffff81111561353557613534613814565b5b6040519080825280601f01601f1916602001820160405280156135675781602001600182028036833780820191505090505b509050600082602001820190505b6001156135ca578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816135be576135bd614c75565b5b04945060008503613575575b819350505050919050565b604051806060016040528084815260200183815260200182815250601360008481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908161362c9190614ba3565b50905050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613693577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161368957613688614c75565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106136d0576d04ee2d6d415b85acef810000000083816136c6576136c5614c75565b5b0492506020810190505b662386f26fc1000083106136ff57662386f26fc1000083816136f5576136f4614c75565b5b0492506010810190505b6305f5e1008310613728576305f5e100838161371e5761371d614c75565b5b0492506008810190505b612710831061374d57612710838161374357613742614c75565b5b0492506004810190505b60648310613770576064838161376657613765614c75565b5b0492506002810190505b600a831061377f576001810190505b80915050919050565b50805461379490614832565b6000825580601f106137a657506137c5565b601f0160209004906000526020600020908101906137c491906137c8565b5b50565b5b808211156137e15760008160009055506001016137c9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61384c82613803565b810181811067ffffffffffffffff8211171561386b5761386a613814565b5b80604052505050565b600061387e6137e5565b905061388a8282613843565b919050565b600067ffffffffffffffff8211156138aa576138a9613814565b5b6138b382613803565b9050602081019050919050565b82818337600083830152505050565b60006138e26138dd8461388f565b613874565b9050828152602081018484840111156138fe576138fd6137fe565b5b6139098482856138c0565b509392505050565b600082601f830112613926576139256137f9565b5b81356139368482602086016138cf565b91505092915050565b600060208284031215613955576139546137ef565b5b600082013567ffffffffffffffff811115613973576139726137f4565b5b61397f84828501613911565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139ee5780820151818401526020810190506139d3565b60008484015250505050565b6000613a05826139b4565b613a0f81856139bf565b9350613a1f8185602086016139d0565b613a2881613803565b840191505092915050565b6000613a3f83836139fa565b905092915050565b6000602082019050919050565b6000613a5f82613988565b613a698185613993565b935083602082028501613a7b856139a4565b8060005b85811015613ab75784840389528151613a988582613a33565b9450613aa383613a47565b925060208a01995050600181019050613a7f565b50829750879550505050505092915050565b60006020820190508181036000830152613ae38184613a54565b905092915050565b6000819050919050565b613afe81613aeb565b82525050565b6000602082019050613b196000830184613af5565b92915050565b613b2881613aeb565b8114613b3357600080fd5b50565b600081359050613b4581613b1f565b92915050565b600060208284031215613b6157613b606137ef565b5b6000613b6f84828501613b36565b91505092915050565b6000606082019050613b8d6000830186613af5565b613b9a6020830185613af5565b613ba76040830184613af5565b949350505050565b600082825260208201905092915050565b6000613bcb826139b4565b613bd58185613baf565b9350613be58185602086016139d0565b613bee81613803565b840191505092915050565b60006060820190508181036000830152613c138186613bc0565b90508181036020830152613c278185613bc0565b90508181036040830152613c3b8184613bc0565b9050949350505050565b6000606082019050613c5a6000830186613af5565b613c676020830185613af5565b8181036040830152613c798184613bc0565b9050949350505050565b6000608082019050613c986000830187613af5565b613ca56020830186613af5565b613cb26040830185613af5565b8181036060830152613cc48184613bc0565b905095945050505050565b60006060820190508181036000830152613ce98186613bc0565b90508181036020830152613cfd8185613bc0565b9050613d0c6040830184613af5565b949350505050565b60008060408385031215613d2b57613d2a6137ef565b5b6000613d3985828601613b36565b9250506020613d4a85828601613b36565b9150509250929050565b6000608082019050613d696000830187613af5565b613d766020830186613af5565b8181036040830152613d888185613bc0565b90508181036060830152613d9c8184613bc0565b905095945050505050565b600080600080600060a08688031215613dc357613dc26137ef565b5b6000613dd188828901613b36565b9550506020613de288828901613b36565b9450506040613df388828901613b36565b935050606086013567ffffffffffffffff811115613e1457613e136137f4565b5b613e2088828901613911565b925050608086013567ffffffffffffffff811115613e4157613e406137f4565b5b613e4d88828901613911565b9150509295509295909350565b60008060008060808587031215613e7457613e736137ef565b5b6000613e8287828801613b36565b9450506020613e9387828801613b36565b935050604085013567ffffffffffffffff811115613eb457613eb36137f4565b5b613ec087828801613911565b925050606085013567ffffffffffffffff811115613ee157613ee06137f4565b5b613eed87828801613911565b91505092959194509250565b60006020820190508181036000830152613f138184613bc0565b905092915050565b60008060008060808587031215613f3557613f346137ef565b5b6000613f4387828801613b36565b945050602085013567ffffffffffffffff811115613f6457613f636137f4565b5b613f7087828801613911565b935050604085013567ffffffffffffffff811115613f9157613f906137f4565b5b613f9d87828801613911565b9250506060613fae87828801613b36565b91505092959194509250565b60008115159050919050565b613fcf81613fba565b82525050565b6000602082019050613fea6000830184613fc6565b92915050565b6000604082019050818103600083015261400a8185613bc0565b9050818103602083015261401e8184613bc0565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61405c81613aeb565b82525050565b600061406e8383614053565b60208301905092915050565b6000602082019050919050565b600061409282614027565b61409c8185614032565b93506140a783614043565b8060005b838110156140d85781516140bf8882614062565b97506140ca8361407a565b9250506001810190506140ab565b5085935050505092915050565b600060208201905081810360008301526140ff8184614087565b905092915050565b60008060008060808587031215614121576141206137ef565b5b600085013567ffffffffffffffff81111561413f5761413e6137f4565b5b61414b87828801613911565b945050602085013567ffffffffffffffff81111561416c5761416b6137f4565b5b61417887828801613911565b935050604085013567ffffffffffffffff811115614199576141986137f4565b5b6141a587828801613911565b92505060606141b687828801613b36565b91505092959194509250565b600080604083850312156141d9576141d86137ef565b5b60006141e785828601613b36565b925050602083013567ffffffffffffffff811115614208576142076137f4565b5b61421485828601613911565b9150509250929050565b600080600060608486031215614237576142366137ef565b5b600061424586828701613b36565b935050602084013567ffffffffffffffff811115614266576142656137f4565b5b61427286828701613911565b925050604084013567ffffffffffffffff811115614293576142926137f4565b5b61429f86828701613911565b9150509250925092565b600080600080608085870312156142c3576142c26137ef565b5b60006142d187828801613b36565b94505060206142e287828801613b36565b93505060406142f387828801613b36565b925050606085013567ffffffffffffffff811115614314576143136137f4565b5b61432087828801613911565b91505092959194509250565b600061012082019050614342600083018c613af5565b61434f602083018b613fc6565b61435c604083018a613fc6565b6143696060830189613fc6565b6143766080830188613fc6565b61438360a0830187613fc6565b61439060c0830186613fc6565b61439d60e0830185613fc6565b6143ab610100830184613fc6565b9a9950505050505050505050565b600080600080608085870312156143d3576143d26137ef565b5b600085013567ffffffffffffffff8111156143f1576143f06137f4565b5b6143fd87828801613911565b945050602085013567ffffffffffffffff81111561441e5761441d6137f4565b5b61442a87828801613911565b935050604061443b87828801613b36565b925050606085013567ffffffffffffffff81111561445c5761445b6137f4565b5b61446887828801613911565b91505092959194509250565b6000806040838503121561448b5761448a6137ef565b5b600083013567ffffffffffffffff8111156144a9576144a86137f4565b5b6144b585828601613911565b925050602083013567ffffffffffffffff8111156144d6576144d56137f4565b5b6144e285828601613911565b9150509250929050565b60008060008060808587031215614506576145056137ef565b5b600061451487828801613b36565b945050602085013567ffffffffffffffff811115614535576145346137f4565b5b61454187828801613911565b935050604061455287828801613b36565b925050606061456387828801613b36565b91505092959194509250565b600067ffffffffffffffff82111561458a57614589613814565b5b602082029050602081019050919050565b600080fd5b60006145b36145ae8461456f565b613874565b905080838252602082019050602084028301858111156145d6576145d561459b565b5b835b8181101561461d57803567ffffffffffffffff8111156145fb576145fa6137f9565b5b8086016146088982613911565b855260208501945050506020810190506145d8565b5050509392505050565b600082601f83011261463c5761463b6137f9565b5b813561464c8482602086016145a0565b91505092915050565b600080600080600060a08688031215614671576146706137ef565b5b600086013567ffffffffffffffff81111561468f5761468e6137f4565b5b61469b88828901613911565b955050602086013567ffffffffffffffff8111156146bc576146bb6137f4565b5b6146c888828901613911565b945050604086013567ffffffffffffffff8111156146e9576146e86137f4565b5b6146f588828901614627565b935050606061470688828901613b36565b925050608086013567ffffffffffffffff811115614727576147266137f4565b5b61473388828901613911565b9150509295509295909350565b61474981613fba565b811461475457600080fd5b50565b60008135905061476681614740565b92915050565b600080600080600060a08688031215614788576147876137ef565b5b600061479688828901613b36565b95505060206147a788828901613b36565b94505060406147b888828901613b36565b935050606086013567ffffffffffffffff8111156147d9576147d86137f4565b5b6147e588828901613911565b92505060806147f688828901614757565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061484a57607f821691505b60208210810361485d5761485c614803565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461489081614832565b61489a8186614863565b945060018216600081146148b557600181146148ca576148fd565b60ff19831686528115158202860193506148fd565b6148d38561486e565b60005b838110156148f5578154818901526001820191506020810190506148d6565b838801955050505b50505092915050565b60006149128284614883565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061498682613aeb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036149b8576149b761494c565b5b600182019050919050565b60006149ce82613aeb565b91506149d983613aeb565b92508282019050808211156149f1576149f061494c565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614a597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614a1c565b614a638683614a1c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614aa0614a9b614a9684613aeb565b614a7b565b613aeb565b9050919050565b6000819050919050565b614aba83614a85565b614ace614ac682614aa7565b848454614a29565b825550505050565b600090565b614ae3614ad6565b614aee818484614ab1565b505050565b5b81811015614b1257614b07600082614adb565b600181019050614af4565b5050565b601f821115614b5757614b28816149f7565b614b3184614a0c565b81016020851015614b40578190505b614b54614b4c85614a0c565b830182614af3565b50505b505050565b600082821c905092915050565b6000614b7a60001984600802614b5c565b1980831691505092915050565b6000614b938383614b69565b9150826002028217905092915050565b614bac826139b4565b67ffffffffffffffff811115614bc557614bc4613814565b5b614bcf8254614832565b614bda828285614b16565b600060209050601f831160018114614c0d5760008415614bfb578287015190505b614c058582614b87565b865550614c6d565b601f198416614c1b866149f7565b60005b82811015614c4357848901518255600182019150602085019450602081019050614c1e565b86831015614c605784890151614c5c601f891682614b69565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220bb882762488fe67c489670815db1d712a697f420ccc118045e40b849da54b47f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2032,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2034,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_donations_ids",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2036,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2038,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2040,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_join_ids",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2042,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_smart_contract_ids",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2044,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2046,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_message_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2048,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_message_read_ids",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2050,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_reply_ids",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2052,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_feed_ids",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2057,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)1930_storage)"
      },
      {
        "astId": 2061,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_template_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2066,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_joined_person",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(join_struct)2002_storage)"
      },
      {
        "astId": 2071,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)1935_storage)"
      },
      {
        "astId": 2076,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)1942_storage)"
      },
      {
        "astId": 2080,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_donated",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2085,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_feeds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(feed_struct)2030_storage)"
      },
      {
        "astId": 2090,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_donations",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(donation_struct)1949_storage)"
      },
      {
        "astId": 2095,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_smart_contracts_uris",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)1956_storage)"
      },
      {
        "astId": 2100,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1963_storage)"
      },
      {
        "astId": 2105,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_messages",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(message_struct)1972_storage)"
      },
      {
        "astId": 2110,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_read_messages",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_struct(message_read_struct)1981_storage)"
      },
      {
        "astId": 2115,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_replies",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(reply_struct)1990_storage)"
      },
      {
        "astId": 2120,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_user_badges",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(user_badge_struct)2021_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)1930_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)1930_storage"
      },
      "t_mapping(t_uint256,t_struct(donation_struct)1949_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.donation_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(donation_struct)1949_storage"
      },
      "t_mapping(t_uint256,t_struct(feed_struct)2030_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.feed_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(feed_struct)2030_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1963_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)1963_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)1935_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)1935_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)1942_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)1942_storage"
      },
      "t_mapping(t_uint256,t_struct(join_struct)2002_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.join_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(join_struct)2002_storage"
      },
      "t_mapping(t_uint256,t_struct(message_read_struct)1981_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.message_read_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_read_struct)1981_storage"
      },
      "t_mapping(t_uint256,t_struct(message_struct)1972_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.message_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_struct)1972_storage"
      },
      "t_mapping(t_uint256,t_struct(reply_struct)1990_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.reply_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(reply_struct)1990_storage"
      },
      "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)1956_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.smart_contract_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(smart_contract_uri_struct)1956_storage"
      },
      "t_mapping(t_uint256,t_struct(user_badge_struct)2021_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.user_badge_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(user_badge_struct)2021_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)1930_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.dao_uri_struct",
        "members": [
          {
            "astId": 1925,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1927,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1929,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(donation_struct)1949_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.donation_struct",
        "members": [
          {
            "astId": 1944,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1946,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "userid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1948,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(feed_struct)2030_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.feed_struct",
        "members": [
          {
            "astId": 2023,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "feed_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2025,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2027,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "Type",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2029,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(goal_ideas_votes_struct)1963_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 1958,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1960,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1962,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)1935_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.goal_uri_struct",
        "members": [
          {
            "astId": 1932,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1934,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)1942_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.ideas_uri_struct",
        "members": [
          {
            "astId": 1937,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1939,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1941,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(join_struct)2002_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.join_struct",
        "members": [
          {
            "astId": 1997,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "daoid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1999,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2001,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "joined_date",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(message_read_struct)1981_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.message_read_struct",
        "members": [
          {
            "astId": 1974,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1976,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1978,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1980,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "msg_type",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(message_struct)1972_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.message_struct",
        "members": [
          {
            "astId": 1965,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1967,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1969,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1971,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(reply_struct)1990_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.reply_struct",
        "members": [
          {
            "astId": 1983,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "reply_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1985,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1987,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1989,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(smart_contract_uri_struct)1956_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.smart_contract_uri_struct",
        "members": [
          {
            "astId": 1951,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "smart_contract_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1953,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1955,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "smart_contract_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(user_badge_struct)2021_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.user_badge_struct",
        "members": [
          {
            "astId": 2004,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2006,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2008,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "joined",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2010,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal",
            "offset": 2,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2012,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas",
            "offset": 3,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2014,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "vote",
            "offset": 4,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2016,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "donation",
            "offset": 5,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2018,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "comment",
            "offset": 6,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2020,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "reply",
            "offset": 7,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}